//script.js
const socket = io();

document.getElementById("createRoom").addEventListener("click", () => {
  socket.emit("createRoom");
});

document.getElementById("joinRoom").addEventListener("click", () => {
  const roomId = document.getElementById("roomIdInput").value;
  socket.emit("joinRoom", roomId);
});

document.getElementById("embedVideo").addEventListener("click", () => {
  const roomId = document.getElementById("roomIdInput").value;
  const videoUrl = document.getElementById("videoUrlInput").value;
  socket.emit("embedVideo", roomId, videoUrl);
});

socket.on("roomCreated", (roomId) => {
  alert(`Room created with ID: ${roomId}`);
  document.getElementById("roomControls").style.display = "block";
  document.getElementById("roomIdInput").value = roomId;
});

socket.on("roomJoined", (roomId, videoUrl) => {
  alert(`Joined room: ${roomId}`);
  document.getElementById("roomControls").style.display = "block";
  if (videoUrl) {
    displayVideo(videoUrl);
  }
});

socket.on("videoEmbedded", (videoUrl) => {
  displayVideo(videoUrl);
});

socket.on("error", (message) => {
  alert(message);
});

socket.on("playVideo", (currentTime) => {
  const videoElement = document.getElementById("videoElement");
  videoElement.currentTime = currentTime;
  videoElement.play();
});

socket.on("pauseVideo", (currentTime) => {
  const videoElement = document.getElementById("videoElement");
  videoElement.currentTime = currentTime;
  videoElement.pause();
});

socket.on("seekVideo", (currentTime) => {
  const videoElement = document.getElementById("videoElement");
  videoElement.currentTime = currentTime;
  videoElement.seeking();
});

function displayVideo(videoUrl) {
  const videoContainer = document.getElementById("videoContainer");
  videoContainer.innerHTML = `<video id="videoElement" width="560" height="315" controls>
                                    <source src="${videoUrl}" type="video/mp4">
                                </video>`;

  const videoElement = document.getElementById("videoElement");

  videoElement.addEventListener("play", () => {
    const roomId = document.getElementById("roomIdInput").value;
    socket.emit("playVideo", roomId, videoElement.currentTime);
  });

  videoElement.addEventListener("pause", () => {
    const roomId = document.getElementById("roomIdInput").value;
    socket.emit("pauseVideo", roomId, videoElement.currentTime);
  });

  videoElement.addEventListener("seeking", () => {
    const roomId = document.getElementById("roomIdInput").value;
    socket.emit("seekVideo", roomId, videoElement.currentTime);
  });
}




// html
<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Room Feature with Video Sync</title>
  </head>
  <body>
    <button id="createRoom">Create Room</button>
    <button id="joinRoom">Join Room</button>
    <input type="text" id="roomIdInput" placeholder="Room ID" />
    <div id="roomControls" style="display: none">
      <input type="text" id="videoUrlInput" placeholder="Video URL" />
      <button id="embedVideo">Embed Video</button>
    </div>
    <div id="videoContainer"></div>
    <script src="/socket.io/socket.io.js"></script>
    <script src="script.js"></script>
  </body>
</html>

//css
body {
    font-family: Arial, sans-serif;
    background-color: #f0f0f0;
    margin: 0;
    padding: 20px;
    display: flex;
    flex-direction: column;
    align-items: center;
}

button {
    padding: 10px 20px;
    margin: 5px;
    background-color: #007BFF;
    color: white;
    border: none;
    border-radius: 5px;
    cursor: pointer;
    transition: background-color 0.3s ease;
}

button:hover {
    background-color: #0056b3;
}

input[type="text"] {
    padding: 10px;
    margin: 5px;
    border: 1px solid #ccc;
    border-radius: 5px;
    width: 300px;
}

#roomControls, #videoContainer {
    margin-top: 20px;
    width: 100%;
    max-width: 800px;
}

#playlist {
    list-style-type: none;
    padding: 0;
}

#playlist li {
    padding: 10px;
    margin: 5px 0;
    background-color: #fff;
    border: 1px solid #ccc;
    border-radius: 5px;
}

video {
    width: 100%;
    max-width: 100%;
    height: auto;
    border-radius: 5px;
    margin-top: 20px;
}



// nodejs (index.js)
const express = require("express");
const cors = require("cors");
const http = require("http");
const { v4: uuidv4 } = require("uuid");
const socketIo = require("socket.io");

// Create an Express application
const app = express();

app.use(cors());

// Create an HTTP server
const server = http.createServer(app);

// Integrate Socket.io with the server
const io = socketIo(server);

// Serve static files (for the client)
app.use(express.static("public"));

// Room management
const rooms = {};

io.on("connection", (socket) => {
  console.log("A user connected:", socket.id);

  socket.on("createRoom", () => {
    const roomId = uuidv4();
    rooms[roomId] = { users: [], videoUrl: null };
    socket.join(roomId);
    rooms[roomId].users.push(socket.id);
    socket.emit("roomCreated", roomId);
    console.log("Room created with ID:", roomId);
  });

  socket.on("joinRoom", (roomId) => {
    if (rooms[roomId]) {
      socket.join(roomId);
      rooms[roomId].users.push(socket.id);
      socket.emit("roomJoined", roomId, rooms[roomId].videoUrl);
      console.log(`User ${socket.id} joined room ${roomId}`);
    } else {
      socket.emit("error", "Room not found");
    }
  });

  socket.on("embedVideo", (roomId, videoUrl) => {
    if (rooms[roomId]) {
      rooms[roomId].videoUrl = videoUrl;
      io.to(roomId).emit("videoEmbedded", videoUrl);
      console.log(`Video URL ${videoUrl} embedded in room ${roomId}`);
    } else {
      socket.emit("error", "Room not found");
    }
  });

  socket.on("playVideo", (roomId, currentTime) => {
    if (rooms[roomId]) {
      io.to(roomId).emit("playVideo", currentTime);
      console.log(`Playing video in room ${roomId} at ${currentTime}s`);
    } else {
      socket.emit("error", "Room not found");
    }
  });

  socket.on("pauseVideo", (roomId, currentTime) => {
    if (rooms[roomId]) {
      io.to(roomId).emit("pauseVideo", currentTime);
      console.log(`Pausing video in room ${roomId} at ${currentTime}s`);
    } else {
      socket.emit("error", "Room not found");
    }
  });

  socket.on("seekVideo", (roomId, currentTime) => {
    if (rooms[roomId]) {
      currentTime = new Date().toLocaleTimeString();
      io.to(roomId).emit("seekVideo", currentTime);
      console.log(`Seeking video in room ${roomId} to ${currentTime}s`);
    } else {
      socket.emit("error", "Room not found");
    }
  });

  socket.on("disconnect", () => {
    console.log("User disconnected:", socket.id);
    for (const roomId in rooms) {
      const index = rooms[roomId].users.indexOf(socket.id);
      if (index !== -1) {
        rooms[roomId].users.splice(index, 1);
        if (rooms[roomId].users.length === 0) {
          delete rooms[roomId];
          console.log("Room deleted:", roomId);
        }
        break;
      }
    }
  });
});

const PORT = process.env.PORT || 3000;

// Start the server
server.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});
